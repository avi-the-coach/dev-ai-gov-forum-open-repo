#!/usr/bin/env node

/**
 * Webinar Game Server Setup Script
 *
 * Generates secure configuration files:
 * - server/.env (admin secret, port, CORS)
 * - admin-credentials.json (admin secret, server URL)
 * - docs/config.js (client server URL)
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('🎮 Webinar Game Server Setup');
console.log('============================\n');

function prompt(question, defaultValue) {
    return new Promise((resolve) => {
        const displayQuestion = defaultValue
            ? `${question} (default: ${defaultValue}): `
            : `${question}: `;

        rl.question(displayQuestion, (answer) => {
            resolve(answer.trim() || defaultValue);
        });
    });
}

async function setup() {
    try {
        // Generate admin secret (UUID)
        const adminSecret = crypto.randomUUID();
        console.log('🔐 Generated admin secret (UUID)\n');

        // Ask for configuration values
        console.log('Please answer the following questions:\n');

        const serverUrl = await prompt(
            'Enter server URL for admin panel connection',
            'http://localhost:3000'
        );

        const corsOrigin = await prompt(
            'Enter CORS origin (GitHub Pages URL or localhost)',
            'http://localhost:8080'
        );

        const clientServerUrl = await prompt(
            'Enter server URL for client connections',
            'http://localhost:3000'
        );

        console.log('\n📝 Creating configuration files...\n');

        // 1. Create server/.env (we're already in server folder)
        const serverEnvPath = path.join(__dirname, '.env');
        const serverEnvContent = `# Server Configuration - NEVER commit this file
# Generated by setup.js on ${new Date().toISOString()}

ADMIN_SECRET=${adminSecret}
PORT=3000
CORS_ORIGIN=${corsOrigin}
`;

        fs.writeFileSync(serverEnvPath, serverEnvContent);
        console.log('✅ Created server/.env');

        // 2. Create admin-credentials.json (in parent/root directory)
        const adminCredsPath = path.join(__dirname, '..', 'admin-credentials.json');
        const adminCreds = {
            adminSecret: adminSecret,
            serverUrl: serverUrl
        };

        fs.writeFileSync(adminCredsPath, JSON.stringify(adminCreds, null, 2));
        console.log('✅ Created admin-credentials.json');

        // 3. Create docs/config.js (in parent/docs directory)
        const docsConfigPath = path.join(__dirname, '..', 'docs', 'config.js');
        const docsConfigContent = `// Client Configuration
// This file can be safely committed to git (not a secret)
// Generated by setup.js on ${new Date().toISOString()}

window.GAME_CONFIG = {
    SERVER_URL: '${clientServerUrl}'
};
`;

        // Create docs directory if it doesn't exist
        const docsDir = path.join(__dirname, '..', 'docs');
        if (!fs.existsSync(docsDir)) {
            fs.mkdirSync(docsDir, { recursive: true });
        }

        fs.writeFileSync(docsConfigPath, docsConfigContent);
        console.log('✅ Created docs/config.js');

        // Success message
        console.log('\n📋 Setup Complete!\n');
        console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
        console.log('⚠️  IMPORTANT SECURITY STEPS:');
        console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n');
        console.log('1. 🔒 SAVE admin-credentials.json to a SAFE location');
        console.log('   (USB drive, password manager, encrypted folder)\n');
        console.log('2. 🗑️  DELETE admin-credentials.json from this folder');
        console.log('   (Run: del admin-credentials.json or rm admin-credentials.json)\n');
        console.log('3. ⚠️  NEVER commit or share admin-credentials.json\n');
        console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n');
        console.log('Next steps:\n');
        console.log('1. 🚀 Start server:');
        console.log('   cd server && npm install && node server.js\n');
        console.log('2. 🔑 Open admin panel:');
        console.log('   Open docs/admin-panel.html in browser\n');
        console.log('3. 📤 Upload admin-credentials.json in admin panel\n');
        console.log('4. 🎮 Share client with participants:');
        console.log('   docs/webinar-registration-ai-in-dev-v2.html\n');
        console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');

    } catch (error) {
        console.error('\n❌ Error during setup:', error.message);
        process.exit(1);
    } finally {
        rl.close();
    }
}

// Run setup
setup();
